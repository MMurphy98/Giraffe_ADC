--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone IV E" LPM_DECODES=13 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_lpm_compare 2018:09:12:13:04:24:SJ cbx_lpm_decode 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


-- Copyright (C) 2018  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.



--synthesis_resources = lut 18 
SUBDESIGN decode_8ua
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[12..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[12..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode667w[1..0]	: WIRE;
	w_anode676w[3..0]	: WIRE;
	w_anode693w[3..0]	: WIRE;
	w_anode703w[3..0]	: WIRE;
	w_anode713w[3..0]	: WIRE;
	w_anode723w[3..0]	: WIRE;
	w_anode733w[3..0]	: WIRE;
	w_anode743w[3..0]	: WIRE;
	w_anode753w[3..0]	: WIRE;
	w_anode765w[1..0]	: WIRE;
	w_anode772w[3..0]	: WIRE;
	w_anode783w[3..0]	: WIRE;
	w_anode793w[3..0]	: WIRE;
	w_anode803w[3..0]	: WIRE;
	w_anode813w[3..0]	: WIRE;
	w_anode823w[3..0]	: WIRE;
	w_anode833w[3..0]	: WIRE;
	w_anode843w[3..0]	: WIRE;
	w_data665w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[12..0] = eq_wire[12..0];
	eq_wire[] = ( ( w_anode843w[3..3], w_anode833w[3..3], w_anode823w[3..3], w_anode813w[3..3], w_anode803w[3..3], w_anode793w[3..3], w_anode783w[3..3], w_anode772w[3..3]), ( w_anode753w[3..3], w_anode743w[3..3], w_anode733w[3..3], w_anode723w[3..3], w_anode713w[3..3], w_anode703w[3..3], w_anode693w[3..3], w_anode676w[3..3]));
	w_anode667w[] = ( (w_anode667w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode676w[] = ( (w_anode676w[2..2] & (! w_data665w[2..2])), (w_anode676w[1..1] & (! w_data665w[1..1])), (w_anode676w[0..0] & (! w_data665w[0..0])), w_anode667w[1..1]);
	w_anode693w[] = ( (w_anode693w[2..2] & (! w_data665w[2..2])), (w_anode693w[1..1] & (! w_data665w[1..1])), (w_anode693w[0..0] & w_data665w[0..0]), w_anode667w[1..1]);
	w_anode703w[] = ( (w_anode703w[2..2] & (! w_data665w[2..2])), (w_anode703w[1..1] & w_data665w[1..1]), (w_anode703w[0..0] & (! w_data665w[0..0])), w_anode667w[1..1]);
	w_anode713w[] = ( (w_anode713w[2..2] & (! w_data665w[2..2])), (w_anode713w[1..1] & w_data665w[1..1]), (w_anode713w[0..0] & w_data665w[0..0]), w_anode667w[1..1]);
	w_anode723w[] = ( (w_anode723w[2..2] & w_data665w[2..2]), (w_anode723w[1..1] & (! w_data665w[1..1])), (w_anode723w[0..0] & (! w_data665w[0..0])), w_anode667w[1..1]);
	w_anode733w[] = ( (w_anode733w[2..2] & w_data665w[2..2]), (w_anode733w[1..1] & (! w_data665w[1..1])), (w_anode733w[0..0] & w_data665w[0..0]), w_anode667w[1..1]);
	w_anode743w[] = ( (w_anode743w[2..2] & w_data665w[2..2]), (w_anode743w[1..1] & w_data665w[1..1]), (w_anode743w[0..0] & (! w_data665w[0..0])), w_anode667w[1..1]);
	w_anode753w[] = ( (w_anode753w[2..2] & w_data665w[2..2]), (w_anode753w[1..1] & w_data665w[1..1]), (w_anode753w[0..0] & w_data665w[0..0]), w_anode667w[1..1]);
	w_anode765w[] = ( (w_anode765w[0..0] & data_wire[3..3]), enable_wire);
	w_anode772w[] = ( (w_anode772w[2..2] & (! w_data665w[2..2])), (w_anode772w[1..1] & (! w_data665w[1..1])), (w_anode772w[0..0] & (! w_data665w[0..0])), w_anode765w[1..1]);
	w_anode783w[] = ( (w_anode783w[2..2] & (! w_data665w[2..2])), (w_anode783w[1..1] & (! w_data665w[1..1])), (w_anode783w[0..0] & w_data665w[0..0]), w_anode765w[1..1]);
	w_anode793w[] = ( (w_anode793w[2..2] & (! w_data665w[2..2])), (w_anode793w[1..1] & w_data665w[1..1]), (w_anode793w[0..0] & (! w_data665w[0..0])), w_anode765w[1..1]);
	w_anode803w[] = ( (w_anode803w[2..2] & (! w_data665w[2..2])), (w_anode803w[1..1] & w_data665w[1..1]), (w_anode803w[0..0] & w_data665w[0..0]), w_anode765w[1..1]);
	w_anode813w[] = ( (w_anode813w[2..2] & w_data665w[2..2]), (w_anode813w[1..1] & (! w_data665w[1..1])), (w_anode813w[0..0] & (! w_data665w[0..0])), w_anode765w[1..1]);
	w_anode823w[] = ( (w_anode823w[2..2] & w_data665w[2..2]), (w_anode823w[1..1] & (! w_data665w[1..1])), (w_anode823w[0..0] & w_data665w[0..0]), w_anode765w[1..1]);
	w_anode833w[] = ( (w_anode833w[2..2] & w_data665w[2..2]), (w_anode833w[1..1] & w_data665w[1..1]), (w_anode833w[0..0] & (! w_data665w[0..0])), w_anode765w[1..1]);
	w_anode843w[] = ( (w_anode843w[2..2] & w_data665w[2..2]), (w_anode843w[1..1] & w_data665w[1..1]), (w_anode843w[0..0] & w_data665w[0..0]), w_anode765w[1..1]);
	w_data665w[2..0] = data_wire[2..0];
END;
--VALID FILE
